<template>
  <view class="page_container">
    <view class="page_wrapper">
      <repeat for="{{list}}" index="index" key="index" item="item">
        <view class="group">
          <view class="select_area clearfix">
            <checkbox-group bindchange="checkboxChange" data-index="{{index}}">
              <label class="checkbox">
                <checkbox value="" checked="{{item.checked}}"/>已选择
              </label>
            </checkbox-group>
          </view>
          <view class="wrapper">
            <view class="image_box">
              <image src="{{item.cover}}" />
            </view>
            <view class="title">
              <view class="icon"></view>
              {{item.name}}
            </view>
            <view class="summary">
              {{item.summary || '暂无描述'}}
            </view>
            <view class="title">
              <view class="icon"></view>
              选择该车系列下的车型
            </view>
            <product :item="item"></product>

          </view>
        </view>
      </repeat>
    </view>

    <view class="page_operate">
      <view class="btn" bindtap="submit">提交</view>
    </view>



  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import Toast from 'wepy-com-toast'
  import testMixin from '../mixins/test'
  import { setProductTypes } from '../store/actions'
  import Product from '../components/product' // aliasFields example


  @connect({
    productTypes (state) {
      return state.counter.productTypes
    },
  }, {
    setProductTypes
  })

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '产品选择'
    }
    components = {
      toast: Toast,
      product:Product
    }

    mixins = [testMixin]

    data = {
      list:[],
      userInfo:null,
      oldSelectType:[]
    }

    computed = {
      
    }

    methods = {
      checkboxChange(e){
        var index = e.target.dataset.index;
        this.list[index].checked = !this.list[index].checked;
        this.$parent.saveProductTypes(this.list);
        this.$apply();

      },
      goEditProduct(e){
        var index = e.target.dataset.index;
        console.log(index);
      },
      submit(){
        console.log(this.list);
        var select = [];
        for(var items of this.list){
          if(items.checked){
            select.push(items);
          }
        }

        let adds = [],dels = [];
        var oldMembers = this.oldSelectType || [];
        dels = this.onSame(select,oldMembers);
        adds = this.onSame(oldMembers,select);
        console.log(adds)
        console.log(dels)
        this.relateProductType({adds,dels},() => {
          this.oldSelectType = JSON.parse(JSON.stringify(select))
        })


      }
    }

    onSame(array1,array2){//比较两个数组变化
      var result = [],resultObj=[];
      for(var i = 0; i < array2.length; i++){
          var uuid2 = array2[i].uuid;
          var isExist = false;
          for(var j = 0; j < array1.length; j++){
              var uuid1 = array1[j].uuid;
              if(uuid1 == uuid2){
                isExist = true;
                  break;
              }
          }
          if(!isExist){
              result.push(uuid2);
              resultObj.push(array2[i]);
          }
      }
      return resultObj;
    }

    initData(){

      this.$parent.checkLocalData(() => {
        var userInfo = this.$parent.globalData.userInfo;
        this.userInfo = userInfo;
        this.getBrandList({}, (resp) => {
          console.log(resp)

          let brandId = resp.list[0].uuid;
          this.getProductTypes({brandId,status:1,parentId:''},(data) => {
            var oldSelectType = [];
            for(var items of data.list){
              items.checked = items.showStatus == 1?true:false;
              if(items.checked){
                oldSelectType.push(items);
              }
              if(items.productChild && items.productChild.length > 0){
                for(var child of items.productChild){
                  child.checked = child.showStatus == 1?true:false;
                }
              }
            }
            this.list = data.list;
            this.oldSelectType = oldSelectType;
            console.log(data.list)
            this.$parent.saveProductTypes(data.list);

            this.$apply();
          })
        })
      })


      
      
    }

    events = {
      
    }

    onShow(){
      this.initData();
    }
    onLoad() {
      


      
    }
  }
</script>

<style lang="less">
  .page_container{
    height: 100%;
    display: flex;
    flex-direction: column;
    .page_wrapper{
      flex-grow: 1;
      overflow: auto;
    }
    .page_operate{
      padding: 24rpx 42rpx;
      height: 80rpx;
      line-height: 80rpx;
      border-top: 1rpx solid #e7e7e7;

      .btn{
        width: 100%;
        height: 100%;
        background: #686a7e;
        color: #fff;
        font-size: 30rpx;
        text-align: center;
        border-radius: 8rpx;
      }
    }
    .group{
      background: #fff;

      .select_area{
        padding: 18rpx 24rpx;
        border-bottom: 1rpx solid #e7e7e7;
        label{
          float: right;
        }
      }

      

      .title{
        font-size: 30rpx;
        color: #666666;
        padding: 20rpx 0;

        .icon{
          width: 12rpx;
          height: 30rpx;
          border-radius: 5rpx;
          background: #3e4057;
          float: left;
          margin-right: 12rpx;
          margin-top: 4rpx;
        }
      }

      .wrapper{
        padding: 24rpx;
        box-sizing: border-box;
        margin-bottom: 30rpx;
        .image_box{
          image{
            width: 100%;
            max-height: 160rpx;
          }
        }
        .summary{
          font-size: 24rpx;
          color: #888888;
          text-indent: 48rpx;
        }
        
      }

    }



  }
</style>



